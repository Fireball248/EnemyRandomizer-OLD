START =====================================================
Printing scene hierarchy for game object: Corpse Hornet 1(Clone)
Hornet Boss 1\Corpse Hornet 1(Clone)
               \--Component: Transform
               \--GameObject activeSelf: False
               \--GameObject layer: 11
               \--GameObject tag: Untagged
               \--Transform Position: (19.6, 28.6, 0.0)
               \--Transform Rotation: (0.0, 0.0, 0.0)
               \--Transform LocalScale: (1.0, 1.0, 1.0)
               \--Component: MeshFilter
               \--Component: MeshRenderer
               \--Component: tk2dSprite
               \--Component: tk2dSpriteAnimator
               \--Component: BoxCollider2D
               \--BoxCollider2D Size: (2.1, 3.4)
               \--BoxCollider2D Offset: (0.0, 0.1)
               \--BoxCollider2D Bounds-Min: (19.6, 28.6, 0.0)
               \--BoxCollider2D Bounds-Max: (19.6, 28.6, 0.0)
               \--BoxCollider2D isTrigger: False
               \--Component: Rigidbody2D
               \--PrintRigidbody2D mass: 1
               \--PrintRigidbody2D velocity: (0.0, 0.0)
               \--PrintRigidbody2D drag: 0
               \--PrintRigidbody2D angularVelocity: 0
               \--PrintRigidbody2D angularDrag: 0.05
               \--PrintRigidbody2D gravityScale: 0.75
               \--PrintRigidbody2D isKinematic: False
               \--PrintRigidbody2D interpolation: None
               \--PrintRigidbody2D freezeRotation: True
               \--PrintRigidbody2D collisionDetectionMode: Continuous
               \--Component: PlayMakerFSM
               \--PFSM Name: Control
               \--PFSM FsmDescription: 
               \--PFSM StateNames
               \----PFSM StateName: Blow
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Launch
               \----PFSM ---- Actions for state: Actions on Blow ::: TransitionToAudioSnapshot
               \----PFSM ---- Actions for state: Actions on Blow ::: GetOwner
               \----PFSM ---- Actions for state: Actions on Blow ::: AudioPlayerOneShotSingle
               \----PFSM ---- Actions for state: Actions on Blow ::: SendMessage
               \----PFSM ---- Actions for state: Actions on Blow ::: AudioPlaySimple
               \----PFSM ---- Actions for state: Actions on Blow ::: SendEventByName
               \----PFSM ---- Actions for state: Actions on Blow ::: FindGameObject
               \----PFSM ---- Actions for state: Actions on Blow ::: DestroyObject
               \----PFSM ---- Actions for state: Actions on Blow ::: SpawnRandomObjectsV2
               \----PFSM ---- Actions for state: Actions on Blow ::: SpawnRandomObjectsV2
               \----PFSM ---- Actions for state: Actions on Blow ::: CreateObject
               \----PFSM ---- Actions for state: Actions on Blow ::: SendMessage
               \----PFSM ---- Actions for state: Actions on Blow ::: SendEventByName
               \----PFSM ---- TransitionToAudioSnapshot(FsmObject, snapshot? ) = Silent (UnityEngine.AudioMixerSnapshot)
               \----PFSM ---- TransitionToAudioSnapshot(String, snapshot?. type) = FsmObject
               \----PFSM ---- TransitionToAudioSnapshot(String, snapshot?.Name) = 
               \----PFSM ---- TransitionToAudioSnapshot(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmObject, a?.audioClip) = Hornet_Fight_Death_01 (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioClip?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(AudioClip, a?.audioClip?.Value) = Hornet_Fight_Death_01 (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, ) = Audio Player Actor      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioPlayer?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(GameObject, a?.audioPlayer?.Value) = Audio Player Actor (UnityEngine.GameObject)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, Self) = None      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.spawnPoint?.Name) = Self
               \----PFSM ---- AudioPlayerOneShotSingle(, a?.spawnPoint?.Value) = 
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 0      :: IsNone? = False
               \----PFSM ---- AudioPlaySimple(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlaySimple(FsmGameObject, ) = None      :: IsNone? = False
               \----PFSM ---- AudioPlaySimple(FsmObject, ) = boss_explode_clean (UnityEngine.AudioClip)      :: IsNone? = False
               \----PFSM ---- SendEventByName (Name) = 
               \----PFSM ---- SendEventByName (delay) = 0
               \----PFSM ---- SendEventByName (eventTarget?.excludeSelf) = False
               \----PFSM ---- SendEventByName (eventTarget?.fsmComponent?.FsmName) = 
               \----PFSM ---- SendEventByName (eventTarget?.fsmName) = 
               \----PFSM ---- SendEventByName (eventTarget?.gameObject?.GameObject?.Name) = 
               \----PFSM ---- SendEventByName (eventTarget?.sendToChildren) = False
               \----PFSM ---- SendEventByName (eventTarget?.target) = BroadcastAll
               \----PFSM ---- SendEventByName (eventTarget?.fsmComponent?.gameObject?.name ) = 
               \----PFSM ---- SendEventByName (sendEvent) = HORNET KILLED
               \----PFSM ---- CreateObject(FsmGameObject, ) = White Wave      :: IsNone? = False
               \----PFSM ---- CreateObject(FsmVector3, ) = (0.0, 0.0, 0.0)      :: IsNone? = True
               \----PFSM ---- CreateObject(FsmVector3, ) = (0.0, 0.0, 0.0)      :: IsNone? = True
               \----PFSM ---- CreateObject(FsmGameObject, Self) = None      :: IsNone? = False
               \----PFSM ---- CreateObject(FsmGameObject, ) = None      :: IsNone? = True
               \----PFSM ---- CreateObject (networkGroup) = 0
               \----PFSM ---- CreateObject (networkInstantiate) = False
               \----PFSM ---- SendEventByName (Name) = 
               \----PFSM ---- SendEventByName (delay) = 0
               \----PFSM ---- SendEventByName (eventTarget?.excludeSelf) = False
               \----PFSM ---- SendEventByName (eventTarget?.fsmComponent?.FsmName) = 
               \----PFSM ---- SendEventByName (eventTarget?.fsmName) = 
               \----PFSM ---- SendEventByName (eventTarget?.gameObject?.GameObject?.Name) = CameraParent
               \----PFSM ---- SendEventByName (eventTarget?.sendToChildren) = False
               \----PFSM ---- SendEventByName (eventTarget?.target) = GameObject
               \----PFSM ---- SendEventByName (eventTarget?.fsmComponent?.gameObject?.name ) = 
               \----PFSM ---- SendEventByName (sendEvent) = AverageShake
               \----PFSM StateName: Launch
               \----PFSM ---- Transitions for state: Transition on FINISHED to state In Air
               \----PFSM ---- Actions for state: Actions on Launch ::: FaceObject
               \----PFSM ---- Actions for state: Actions on Launch ::: GetScale
               \----PFSM ---- Actions for state: Actions on Launch ::: FloatMultiply
               \----PFSM ---- Actions for state: Actions on Launch ::: SetVelocity2d
               \----PFSM ---- Actions for state: Actions on Launch ::: NextFrameEvent
               \----PFSM ---- Actions for state: Actions on Launch ::: SetRotation
               \----PFSM ---- FaceObject(FsmGameObject, Self) = None      :: IsNone? = False
               \----PFSM ---- FaceObject(FsmGameObject, Hero) = Knight      :: IsNone? = False
               \----PFSM ---- FaceObject(FsmString, ) =       :: IsNone? = False
               \----PFSM ---- FaceObject(Boolean, playNewAnimation) = False
               \----PFSM ---- FaceObject(Boolean, resetFrame) = False
               \----PFSM ---- FaceObject(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- GetScale(Boolean, everyFrame) = False
               \----PFSM ---- GetScale(FsmGameObject, ) = None      :: IsNone? = False
               \----PFSM ---- GetScale(Space, space) = World
               \----PFSM ---- GetScale(FsmVector3, ) = (0.0, 0.0, 0.0)      :: IsNone? = True
               \----PFSM ---- GetScale(FsmFloat, X Velocity) = 0      :: IsNone? = False
               \----PFSM ---- GetScale(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- GetScale(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- FloatMultiply (Name) = 
               \----PFSM ---- FloatMultiply (floatVariable) = 0
               \----PFSM ---- FloatMultiply (multiplyBy) = 5
               \----PFSM ---- SetVelocity2d (Name) = 
               \----PFSM ---- SetVelocity2d (gameObject?.GameObject) = None
               \----PFSM ---- SetVelocity2d (gameObject?.GameObject?.Name) = 
               \----PFSM ---- SetVelocity2d (vector?.Value) = (0.0, 0.0)
               \----PFSM ---- SetVelocity2d (x) = 0
               \----PFSM ---- SetVelocity2d (y) = 20
               \----PFSM ---- SetVelocity2d (vector?.Value name) = 
               \----PFSM ---- SetVelocity2d (x name) = X Velocity
               \----PFSM ---- SetVelocity2d (y name) = 
               \----PFSM ---- SetVelocity2d (everyFrame) = False
               \----PFSM ---- NextFrameEvent(String, sendEvent) = FINISHED
               \----PFSM ---- SetRotation (Name) = 
               \----PFSM ---- SetRotation (GameObject) = None
               \----PFSM ---- SetRotation (GameObject Name) = 
               \----PFSM ---- SetRotation (OwnerOption) = UseOwner
               \----PFSM ---- SetRotation (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- SetRotation (vector name) = 
               \----PFSM ---- SetRotation (everyFrame) = False
               \----PFSM ---- SetRotation (lateUpdate) = False
               \----PFSM ---- SetRotation (space) = World
               \----PFSM ---- SetRotation (xAngle) = 0
               \----PFSM ---- SetRotation (yAngle) = 0
               \----PFSM ---- SetRotation (zAngle) = 0
               \----PFSM ---- SetRotation (xAngle name) = 
               \----PFSM ---- SetRotation (yAngle name) = 
               \----PFSM ---- SetRotation (zAngle name) = 
               \----PFSM StateName: In Air
               \----PFSM ---- Transitions for state: Transition on LAND to state Land
               \----PFSM ---- Actions for state: Actions on In Air ::: CheckCollisionSideEnter
               \----PFSM ---- Actions for state: Actions on In Air ::: CheckCollisionSide
               \----PFSM ---- Actions for state: Actions on In Air ::: SetRotation
               \----PFSM ---- CheckCollisionSideEnter(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- CheckCollisionSideEnter(FsmBool, ) = False      :: IsNone? = True
               \----PFSM ---- CheckCollisionSideEnter(String, bottomHitEvent) = LAND
               \----PFSM ---- CheckCollisionSideEnter(FsmBool, ) = False      :: IsNone? = True
               \----PFSM ---- CheckCollisionSideEnter(, leftHitEvent) = 
               \----PFSM ---- CheckCollisionSideEnter(FsmBool, ) = False      :: IsNone? = True
               \----PFSM ---- CheckCollisionSideEnter(, rightHitEvent) = 
               \----PFSM ---- CheckCollisionSideEnter(FsmBool, ) = False      :: IsNone? = True
               \----PFSM ---- CheckCollisionSideEnter(, topHitEvent) = 
               \----PFSM ---- CheckCollisionSideEnter(Boolean, otherLayer) = False
               \----PFSM ---- CheckCollisionSideEnter(Int32, otherLayerNumber) = 0
               \----PFSM ---- CheckCollisionSide(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- CheckCollisionSide(FsmBool, ) = False      :: IsNone? = True
               \----PFSM ---- CheckCollisionSide(String, bottomHitEvent) = LAND
               \----PFSM ---- CheckCollisionSide(FsmBool, ) = False      :: IsNone? = True
               \----PFSM ---- CheckCollisionSide(, leftHitEvent) = 
               \----PFSM ---- CheckCollisionSide(FsmBool, ) = False      :: IsNone? = True
               \----PFSM ---- CheckCollisionSide(, rightHitEvent) = 
               \----PFSM ---- CheckCollisionSide(FsmBool, ) = False      :: IsNone? = True
               \----PFSM ---- CheckCollisionSide(, topHitEvent) = 
               \----PFSM ---- CheckCollisionSide(Boolean, otherLayer) = False
               \----PFSM ---- CheckCollisionSide(Int32, otherLayerNumber) = 0
               \----PFSM ---- SetRotation (Name) = 
               \----PFSM ---- SetRotation (GameObject) = None
               \----PFSM ---- SetRotation (GameObject Name) = 
               \----PFSM ---- SetRotation (OwnerOption) = UseOwner
               \----PFSM ---- SetRotation (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- SetRotation (vector name) = 
               \----PFSM ---- SetRotation (everyFrame) = False
               \----PFSM ---- SetRotation (lateUpdate) = False
               \----PFSM ---- SetRotation (space) = World
               \----PFSM ---- SetRotation (xAngle) = 0
               \----PFSM ---- SetRotation (yAngle) = 0
               \----PFSM ---- SetRotation (zAngle) = 0
               \----PFSM ---- SetRotation (xAngle name) = 
               \----PFSM ---- SetRotation (yAngle name) = 
               \----PFSM ---- SetRotation (zAngle name) = 
               \----PFSM StateName: Land
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Check Pos
               \----PFSM ---- Actions for state: Actions on Land ::: Tk2dPlayAnimation
               \----PFSM ---- Actions for state: Actions on Land ::: SetVelocity2d
               \----PFSM ---- Actions for state: Actions on Land ::: Wait
               \----PFSM ---- Actions for state: Actions on Land ::: SetRotation
               \----PFSM ---- Tk2dPlayAnimation (Name) = 
               \----PFSM ---- Tk2dPlayAnimation (animLibName) = 
               \----PFSM ---- Tk2dPlayAnimation (clipName) = Wounded
               \----PFSM ---- SetVelocity2d (Name) = 
               \----PFSM ---- SetVelocity2d (gameObject?.GameObject) = None
               \----PFSM ---- SetVelocity2d (gameObject?.GameObject?.Name) = 
               \----PFSM ---- SetVelocity2d (vector?.Value) = (0.0, 0.0)
               \----PFSM ---- SetVelocity2d (x) = 0
               \----PFSM ---- SetVelocity2d (y) = 0
               \----PFSM ---- SetVelocity2d (vector?.Value name) = 
               \----PFSM ---- SetVelocity2d (x name) = 
               \----PFSM ---- SetVelocity2d (y name) = 
               \----PFSM ---- SetVelocity2d (everyFrame) = False
               \----PFSM ---- Wait(String, finishEvent) = FINISHED
               \----PFSM ---- Wait(Boolean, realTime) = False
               \----PFSM ---- Wait(FsmFloat, ) = 3      :: IsNone? = False
               \----PFSM ---- SetRotation (Name) = 
               \----PFSM ---- SetRotation (GameObject) = None
               \----PFSM ---- SetRotation (GameObject Name) = 
               \----PFSM ---- SetRotation (OwnerOption) = UseOwner
               \----PFSM ---- SetRotation (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- SetRotation (vector name) = 
               \----PFSM ---- SetRotation (everyFrame) = False
               \----PFSM ---- SetRotation (lateUpdate) = False
               \----PFSM ---- SetRotation (space) = World
               \----PFSM ---- SetRotation (xAngle) = 0
               \----PFSM ---- SetRotation (yAngle) = 0
               \----PFSM ---- SetRotation (zAngle) = 0
               \----PFSM ---- SetRotation (xAngle name) = 
               \----PFSM ---- SetRotation (yAngle name) = 
               \----PFSM ---- SetRotation (zAngle name) = 
               \----PFSM StateName: Check Pos
               \----PFSM ---- Transitions for state: Transition on L to state L
               \----PFSM ---- Transitions for state: Transition on R to state R
               \----PFSM ---- Actions for state: Actions on Check Pos ::: GetPosition
               \----PFSM ---- Actions for state: Actions on Check Pos ::: FloatCompare
               \----PFSM ---- GetPosition (Name) = 
               \----PFSM ---- GetPosition (GameObject) = None
               \----PFSM ---- GetPosition (GameObject Name) = 
               \----PFSM ---- GetPosition (OwnerOption) = UseOwner
               \----PFSM ---- GetPosition (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- GetPosition (vector Name) = 
               \----PFSM ---- GetPosition (everyFrame) = False
               \----PFSM ---- GetPosition (space) = World
               \----PFSM ---- GetPosition(FsmFloat, X Pos) = 0      :: IsNone? = False
               \----PFSM ---- GetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- GetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- GetPosition(FsmVector3, ) = (0.0, 0.0, 0.0)      :: IsNone? = True
               \----PFSM ---- FloatCompare (Name) = 
               \----PFSM ---- FloatCompare (float1) = 0
               \----PFSM ---- FloatCompare (float2) = 27.3
               \----PFSM ---- FloatCompare (float1 Name) = X Pos
               \----PFSM ---- FloatCompare (float2 Name) = 
               \----PFSM ---- FloatCompare (greaterThan) = R
               \----PFSM ---- FloatCompare (lessThan) = L
               \----PFSM ---- FloatCompare (equal) = 
               \----PFSM ---- FloatCompare (everyFrame) = False
               \----PFSM StateName: L
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Jump
               \----PFSM ---- Actions for state: Actions on L ::: SetScale
               \----PFSM ---- Actions for state: Actions on L ::: SetVector3Value
               \----PFSM ---- Actions for state: Actions on L ::: SetFloatValue
               \----PFSM ---- SetScale (Name) = 
               \----PFSM ---- SetScale (GameObject) = None
               \----PFSM ---- SetScale (GameObject Name) = 
               \----PFSM ---- SetScale (GameObject V) = 
               \----PFSM ---- SetScale (GameObject VName) = 
               \----PFSM ---- SetScale (OwnerOption) = UseOwner
               \----PFSM ---- SetScale (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- SetScale (vector Name) = 
               \----PFSM ---- SetScale (everyFrame) = False
               \----PFSM ---- SetScale (lateUpdate) = False
               \----PFSM ---- SetScale (x) = -1
               \----PFSM ---- SetScale (x Name) = 
               \----PFSM ---- SetScale (y) = 0
               \----PFSM ---- SetScale (y Name) = 
               \----PFSM ---- SetScale (z) = 0
               \----PFSM ---- SetScale (z Name) = 
               \----PFSM ---- SetFloatValue (Name) = 
               \----PFSM ---- SetFloatValue (floatValue) = 45
               \----PFSM ---- SetFloatValue (floatValue?.Name) = 
               \----PFSM ---- SetFloatValue (floatVariable) = 0
               \----PFSM ---- SetFloatValue (floatVariable?.Name) = Rotation
               \----PFSM StateName: R
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Jump
               \----PFSM ---- Actions for state: Actions on R ::: SetScale
               \----PFSM ---- Actions for state: Actions on R ::: SetVector3Value
               \----PFSM ---- Actions for state: Actions on R ::: SetFloatValue
               \----PFSM ---- SetScale (Name) = 
               \----PFSM ---- SetScale (GameObject) = None
               \----PFSM ---- SetScale (GameObject Name) = 
               \----PFSM ---- SetScale (GameObject V) = 
               \----PFSM ---- SetScale (GameObject VName) = 
               \----PFSM ---- SetScale (OwnerOption) = UseOwner
               \----PFSM ---- SetScale (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- SetScale (vector Name) = 
               \----PFSM ---- SetScale (everyFrame) = False
               \----PFSM ---- SetScale (lateUpdate) = False
               \----PFSM ---- SetScale (x) = 1
               \----PFSM ---- SetScale (x Name) = 
               \----PFSM ---- SetScale (y) = 0
               \----PFSM ---- SetScale (y Name) = 
               \----PFSM ---- SetScale (z) = 0
               \----PFSM ---- SetScale (z Name) = 
               \----PFSM ---- SetFloatValue (Name) = 
               \----PFSM ---- SetFloatValue (floatValue) = -45
               \----PFSM ---- SetFloatValue (floatValue?.Name) = 
               \----PFSM ---- SetFloatValue (floatVariable) = 0
               \----PFSM ---- SetFloatValue (floatVariable?.Name) = Rotation
               \----PFSM StateName: Jump
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Throw Start
               \----PFSM ---- Actions for state: Actions on Jump ::: Wait
               \----PFSM ---- Actions for state: Actions on Jump ::: AudioPlayerOneShotSingle
               \----PFSM ---- Actions for state: Actions on Jump ::: PlayParticleEmitter
               \----PFSM ---- Actions for state: Actions on Jump ::: SetMeshRenderer
               \----PFSM ---- Actions for state: Actions on Jump ::: ActivateGameObject
               \----PFSM ---- Actions for state: Actions on Jump ::: SetCollider
               \----PFSM ---- Actions for state: Actions on Jump ::: SetIsKinematic2d
               \----PFSM ---- Actions for state: Actions on Jump ::: Tk2dPlayAnimation
               \----PFSM ---- Actions for state: Actions on Jump ::: iTweenMoveBy
               \----PFSM ---- Wait(String, finishEvent) = FINISHED
               \----PFSM ---- Wait(Boolean, realTime) = False
               \----PFSM ---- Wait(FsmFloat, ) = 0.415      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmObject, a?.audioClip) = Hornet_Fight_Stun_02 (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioClip?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(AudioClip, a?.audioClip?.Value) = Hornet_Fight_Stun_02 (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, ) = Audio Player Actor      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioPlayer?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(GameObject, a?.audioPlayer?.Value) = Audio Player Actor (UnityEngine.GameObject)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, Self) = None      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.spawnPoint?.Name) = Self
               \----PFSM ---- AudioPlayerOneShotSingle(, a?.spawnPoint?.Value) = 
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 0      :: IsNone? = False
               \----PFSM ---- PlayParticleEmitter(FsmGameObject, Grass) = Grass      :: IsNone? = False
               \----PFSM ---- PlayParticleEmitter(GameObject, GameObject value) = Grass (UnityEngine.GameObject)
               \----PFSM ---- PlayParticleEmitter(String, GameObject value name) = Grass
               \----PFSM ---- PlayParticleEmitter(String, GameObject name) = Grass
               \----PFSM ---- PlayParticleEmitter(FsmInt, ) = 0      :: IsNone? = False
               \----PFSM ---- SetMeshRenderer (Name) = 
               \----PFSM ---- SetMeshRenderer (gameObject?.GameObject?.Name) = 
               \----PFSM ---- SetMeshRenderer (active) = False
               \----PFSM ---- ActivateGameObject (Name) = 
               \----PFSM ---- ActivateGameObject (GameObject) = Leave Anim
               \----PFSM ---- ActivateGameObject (OwnerOption) = SpecifyGameObject
               \----PFSM ---- ActivateGameObject (activate) = True
               \----PFSM ---- SetCollider (Name) = 
               \----PFSM ---- SetCollider (gameObject?.GameObject?.Name) = 
               \----PFSM ---- SetCollider (active) = False
               \----PFSM ---- SetIsKinematic2d (Name) = 
               \----PFSM ---- SetIsKinematic2d (gameObject?.GameObject?.Name) = 
               \----PFSM ---- SetIsKinematic2d (isKinematic) = True
               \----PFSM ---- Tk2dPlayAnimation (Name) = 
               \----PFSM ---- Tk2dPlayAnimation (animLibName) = 
               \----PFSM ---- Tk2dPlayAnimation (clipName) = Jump Full
               \----PFSM StateName: Throw Start
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Throw
               \----PFSM ---- Actions for state: Actions on Throw Start ::: Tk2dPlayAnimationWithEvents
               \----PFSM ---- Tk2dPlayAnimationWithEvents(String, animationCompleteEvent) = FINISHED
               \----PFSM ---- Tk2dPlayAnimationWithEvents(, animationTriggerEvent) = 
               \----PFSM ---- Tk2dPlayAnimationWithEvents(FsmString, ) = Throw Side Start      :: IsNone? = False
               \----PFSM ---- Tk2dPlayAnimationWithEvents(FsmGameObject, Leave Anim) = Leave Anim      :: IsNone? = False
               \----PFSM StateName: Throw
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Yank
               \----PFSM ---- Actions for state: Actions on Throw ::: ActivateGameObject
               \----PFSM ---- Actions for state: Actions on Throw ::: Tk2dPlayAnimationWithEvents
               \----PFSM ---- Actions for state: Actions on Throw ::: Tk2dPlayAnimation
               \----PFSM ---- Actions for state: Actions on Throw ::: AudioPlayerOneShotSingle
               \----PFSM ---- ActivateGameObject (Name) = 
               \----PFSM ---- ActivateGameObject (GameObject) = Thread
               \----PFSM ---- ActivateGameObject (OwnerOption) = SpecifyGameObject
               \----PFSM ---- ActivateGameObject (activate) = True
               \----PFSM ---- Tk2dPlayAnimationWithEvents(String, animationCompleteEvent) = FINISHED
               \----PFSM ---- Tk2dPlayAnimationWithEvents(, animationTriggerEvent) = 
               \----PFSM ---- Tk2dPlayAnimationWithEvents(FsmString, ) = Thread 1      :: IsNone? = False
               \----PFSM ---- Tk2dPlayAnimationWithEvents(FsmGameObject, Thread) = Thread      :: IsNone? = False
               \----PFSM ---- Tk2dPlayAnimation (Name) = 
               \----PFSM ---- Tk2dPlayAnimation (animLibName) = 
               \----PFSM ---- Tk2dPlayAnimation (clipName) = Throw Side
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmObject, a?.audioClip) = hornet_needle_thow_spin (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioClip?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(AudioClip, a?.audioClip?.Value) = hornet_needle_thow_spin (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, ) = Audio Player Actor      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioPlayer?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(GameObject, a?.audioPlayer?.Value) = Audio Player Actor (UnityEngine.GameObject)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, Hero) = Knight      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.spawnPoint?.Name) = Hero
               \----PFSM ---- AudioPlayerOneShotSingle(GameObject, a?.spawnPoint?.Value) = Knight (UnityEngine.GameObject)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 0      :: IsNone? = False
               \----PFSM StateName: Yank
               \----PFSM ---- Transitions for state: Transition on FINISHED to state End
               \----PFSM ---- Actions for state: Actions on Yank ::: Tk2dPlayAnimation
               \----PFSM ---- Actions for state: Actions on Yank ::: AudioPlayerOneShotSingle
               \----PFSM ---- Actions for state: Actions on Yank ::: SetParent
               \----PFSM ---- Actions for state: Actions on Yank ::: Rotate
               \----PFSM ---- Actions for state: Actions on Yank ::: SetParent
               \----PFSM ---- Actions for state: Actions on Yank ::: iTweenMoveBy
               \----PFSM ---- Actions for state: Actions on Yank ::: AudioPlayerOneShotSingle
               \----PFSM ---- Tk2dPlayAnimation (Name) = 
               \----PFSM ---- Tk2dPlayAnimation (animLibName) = 
               \----PFSM ---- Tk2dPlayAnimation (clipName) = Harpoon Side
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmObject, a?.audioClip) = Hornet_Fight_Yell_03 (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioClip?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(AudioClip, a?.audioClip?.Value) = Hornet_Fight_Yell_03 (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, ) = Audio Player Actor      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioPlayer?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(GameObject, a?.audioPlayer?.Value) = Audio Player Actor (UnityEngine.GameObject)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, Self) = None      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.spawnPoint?.Name) = Self
               \----PFSM ---- AudioPlayerOneShotSingle(, a?.spawnPoint?.Value) = 
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 0      :: IsNone? = False
               \----PFSM ---- SetParent(FsmGameObject, Thread) = Thread      :: IsNone? = False
               \----PFSM ---- SetParent(GameObject, GameObject value) = Thread (UnityEngine.GameObject)
               \----PFSM ---- SetParent(String, GameObject value name) = Thread
               \----PFSM ---- SetParent(String, GameObject name) = Thread
               \----PFSM ---- SetParent(FsmGameObject, ) = None      :: IsNone? = False
               \----PFSM ---- SetParent(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- SetParent(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- SetParent(FsmGameObject, Thread) = Thread      :: IsNone? = False
               \----PFSM ---- SetParent(GameObject, GameObject value) = Thread (UnityEngine.GameObject)
               \----PFSM ---- SetParent(String, GameObject value name) = Thread
               \----PFSM ---- SetParent(String, GameObject name) = Thread
               \----PFSM ---- SetParent(FsmGameObject, Self) = None      :: IsNone? = False
               \----PFSM ---- SetParent(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- SetParent(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmObject, a?.audioClip) = hornet_dash (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioClip?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(AudioClip, a?.audioClip?.Value) = hornet_dash (UnityEngine.AudioClip)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, ) = Audio Player Actor      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.audioPlayer?.Name) = 
               \----PFSM ---- AudioPlayerOneShotSingle(GameObject, a?.audioPlayer?.Value) = Audio Player Actor (UnityEngine.GameObject)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmGameObject, Hero) = Knight      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(String, a?.spawnPoint?.Name) = Hero
               \----PFSM ---- AudioPlayerOneShotSingle(GameObject, a?.spawnPoint?.Value) = Knight (UnityEngine.GameObject)
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1.15      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 1.15      :: IsNone? = False
               \----PFSM ---- AudioPlayerOneShotSingle(FsmFloat, ) = 0      :: IsNone? = False
               \----PFSM StateName: End
               \----PFSM ---- Transitions for state: Transition on FINISHED to state 
               \----PFSM ---- Actions for state: Actions on End ::: SendEventByName
               \----PFSM ---- Actions for state: Actions on End ::: SetParent
               \----PFSM ---- Actions for state: Actions on End ::: SetRotation
               \----PFSM ---- Actions for state: Actions on End ::: PlayParticleEmitter
               \----PFSM ---- Actions for state: Actions on End ::: SetMeshRenderer
               \----PFSM ---- Actions for state: Actions on End ::: SetMeshRenderer
               \----PFSM ---- Actions for state: Actions on End ::: SendEventByName
               \----PFSM ---- SendEventByName (Name) = 
               \----PFSM ---- SendEventByName (delay) = 0
               \----PFSM ---- SendEventByName (eventTarget?.excludeSelf) = False
               \----PFSM ---- SendEventByName (eventTarget?.fsmComponent?.FsmName) = 
               \----PFSM ---- SendEventByName (eventTarget?.fsmName) = 
               \----PFSM ---- SendEventByName (eventTarget?.gameObject?.GameObject?.Name) = CameraParent
               \----PFSM ---- SendEventByName (eventTarget?.sendToChildren) = False
               \----PFSM ---- SendEventByName (eventTarget?.target) = GameObject
               \----PFSM ---- SendEventByName (eventTarget?.fsmComponent?.gameObject?.name ) = 
               \----PFSM ---- SendEventByName (sendEvent) = EnemyKillShake
               \----PFSM ---- SetParent(FsmGameObject, Grass Escape) = Grass Escape      :: IsNone? = False
               \----PFSM ---- SetParent(GameObject, GameObject value) = Grass Escape (UnityEngine.GameObject)
               \----PFSM ---- SetParent(String, GameObject value name) = Grass Escape
               \----PFSM ---- SetParent(String, GameObject name) = Grass Escape
               \----PFSM ---- SetParent(FsmGameObject, ) = None      :: IsNone? = False
               \----PFSM ---- SetParent(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- SetParent(FsmBool, ) = False      :: IsNone? = False
               \----PFSM ---- SetRotation (Name) = 
               \----PFSM ---- SetRotation (GameObject) = Grass Escape
               \----PFSM ---- SetRotation (GameObject Name) = Grass Escape
               \----PFSM ---- SetRotation (OwnerOption) = SpecifyGameObject
               \----PFSM ---- SetRotation (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- SetRotation (vector name) = 
               \----PFSM ---- SetRotation (everyFrame) = False
               \----PFSM ---- SetRotation (lateUpdate) = False
               \----PFSM ---- SetRotation (space) = World
               \----PFSM ---- SetRotation (xAngle) = 0
               \----PFSM ---- SetRotation (yAngle) = 0
               \----PFSM ---- SetRotation (zAngle) = 0
               \----PFSM ---- SetRotation (xAngle name) = 
               \----PFSM ---- SetRotation (yAngle name) = 
               \----PFSM ---- SetRotation (zAngle name) = 
               \----PFSM ---- PlayParticleEmitter(FsmGameObject, Grass Escape) = Grass Escape      :: IsNone? = False
               \----PFSM ---- PlayParticleEmitter(GameObject, GameObject value) = Grass Escape (UnityEngine.GameObject)
               \----PFSM ---- PlayParticleEmitter(String, GameObject value name) = Grass Escape
               \----PFSM ---- PlayParticleEmitter(String, GameObject name) = Grass Escape
               \----PFSM ---- PlayParticleEmitter(FsmInt, ) = 0      :: IsNone? = False
               \----PFSM ---- SetMeshRenderer (Name) = 
               \----PFSM ---- SetMeshRenderer (gameObject?.GameObject?.Name) = 
               \----PFSM ---- SetMeshRenderer (active) = False
               \----PFSM ---- SetMeshRenderer (Name) = 
               \----PFSM ---- SetMeshRenderer (gameObject?.GameObject?.Name) = Leave Anim
               \----PFSM ---- SetMeshRenderer (active) = False
               \----PFSM ---- SendEventByName (Name) = 
               \----PFSM ---- SendEventByName (delay) = 0
               \----PFSM ---- SendEventByName (eventTarget?.excludeSelf) = False
               \----PFSM ---- SendEventByName (eventTarget?.fsmComponent?.FsmName) = 
               \----PFSM ---- SendEventByName (eventTarget?.fsmName) = 
               \----PFSM ---- SendEventByName (eventTarget?.gameObject?.GameObject?.Name) = 
               \----PFSM ---- SendEventByName (eventTarget?.sendToChildren) = False
               \----PFSM ---- SendEventByName (eventTarget?.target) = BroadcastAll
               \----PFSM ---- SendEventByName (eventTarget?.fsmComponent?.gameObject?.name ) = 
               \----PFSM ---- SendEventByName (sendEvent) = HORNET LEAVE
               \----PFSM StateName: Set PD
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Blow
               \----PFSM ---- Actions for state: Actions on Set PD ::: SetPlayerDataBool
               \----PFSM ---- Actions for state: Actions on Set PD ::: CallMethodProper
               \----PFSM ---- Actions for state: Actions on Set PD ::: SendMessage
               \----PFSM ---- SetPlayerDataBool (Name) = 
               \----PFSM ---- SetPlayerDataInt (boolName) = True
               \----PFSM ---- SetPlayerDataBool (boolName) = hornet1Defeated
               \----PFSM ---- SetPlayerDataBool (storeValue) = 
               \----PFSM ---- CallMethodProper(FsmString, ) = GameManager      :: IsNone? = False
               \----PFSM ---- CallMethodProper(FsmGameObject, GameManager) = _GameManager      :: IsNone? = False
               \----PFSM ---- CallMethodProper(FsmString, ) = AwardAchievement      :: IsNone? = False
               \----PFSM ---- CallMethodProper(FsmVar, ) = HORNET_1      :: IsNone? = False      :: useVariable? = False      :: objectType? = UnityEngine.Object      :: intValue? = 0      :: floatValue? = 0      :: objectReference? =       :: vector2Value? = (0.0, 0.0)      :: vector3Value? = (0.0, 0.0, 0.0)      :: vector4Value? = (0.0, 0.0, 0.0, 0.0)      :: quaternionValue? = (0.0, 0.0, 0.0, 0.0)      :: stringValue? = HORNET_1      :::::::::::::::::::
               \----PFSM ---- CallMethodProper(FsmVar, ) = None      :: IsNone? = True      :: useVariable? = True      :: objectType? = UnityEngine.Object      :: intValue? = 0      :: floatValue? = 0      :: objectReference? =       :: vector2Value? = (0.0, 0.0)      :: vector3Value? = (0.0, 0.0, 0.0)      :: vector4Value? = (0.0, 0.0, 0.0, 0.0)      :: quaternionValue? = (0.0, 0.0, 0.0, 0.0)      :: stringValue? = 
               \----PFSM StateName: Limit Pos
               \----PFSM ---- Transitions for state: Transition on FINISHED to state Set PD
               \----PFSM ---- Actions for state: Actions on Limit Pos ::: GetPosition
               \----PFSM ---- Actions for state: Actions on Limit Pos ::: FloatClamp
               \----PFSM ---- Actions for state: Actions on Limit Pos ::: SetPosition
               \----PFSM ---- Actions for state: Actions on Limit Pos ::: GetPosition
               \----PFSM ---- Actions for state: Actions on Limit Pos ::: FloatClamp
               \----PFSM ---- Actions for state: Actions on Limit Pos ::: SetPosition
               \----PFSM ---- GetPosition (Name) = 
               \----PFSM ---- GetPosition (GameObject) = None
               \----PFSM ---- GetPosition (GameObject Name) = 
               \----PFSM ---- GetPosition (OwnerOption) = UseOwner
               \----PFSM ---- GetPosition (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- GetPosition (vector Name) = 
               \----PFSM ---- GetPosition (everyFrame) = False
               \----PFSM ---- GetPosition (space) = World
               \----PFSM ---- GetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- GetPosition(FsmFloat, Y Pos) = 0      :: IsNone? = False
               \----PFSM ---- GetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- GetPosition(FsmVector3, ) = (0.0, 0.0, 0.0)      :: IsNone? = True
               \----PFSM ---- SetPosition (Name) = 
               \----PFSM ---- SetPosition (GameObject) = None
               \----PFSM ---- SetPosition (GameObject Name) = 
               \----PFSM ---- SetPosition (OwnerOption) = UseOwner
               \----PFSM ---- SetPosition (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- SetPosition (vector Name) = 
               \----PFSM ---- SetPosition (everyFrame) = False
               \----PFSM ---- SetPosition (space) = World
               \----PFSM ---- SetPosition (lateUpdate) = False
               \----PFSM ---- SetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- SetPosition(FsmFloat, Y Pos) = 0      :: IsNone? = False
               \----PFSM ---- SetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- SetPosition(FsmVector3, ) = (0.0, 0.0, 0.0)      :: IsNone? = True
               \----PFSM ---- GetPosition (Name) = 
               \----PFSM ---- GetPosition (GameObject) = None
               \----PFSM ---- GetPosition (GameObject Name) = 
               \----PFSM ---- GetPosition (OwnerOption) = UseOwner
               \----PFSM ---- GetPosition (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- GetPosition (vector Name) = 
               \----PFSM ---- GetPosition (everyFrame) = False
               \----PFSM ---- GetPosition (space) = World
               \----PFSM ---- GetPosition(FsmFloat, X Pos) = 0      :: IsNone? = False
               \----PFSM ---- GetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- GetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- GetPosition(FsmVector3, ) = (0.0, 0.0, 0.0)      :: IsNone? = True
               \----PFSM ---- SetPosition (Name) = 
               \----PFSM ---- SetPosition (GameObject) = None
               \----PFSM ---- SetPosition (GameObject Name) = 
               \----PFSM ---- SetPosition (OwnerOption) = UseOwner
               \----PFSM ---- SetPosition (vector) = (0.0, 0.0, 0.0)
               \----PFSM ---- SetPosition (vector Name) = 
               \----PFSM ---- SetPosition (everyFrame) = False
               \----PFSM ---- SetPosition (space) = World
               \----PFSM ---- SetPosition (lateUpdate) = False
               \----PFSM ---- SetPosition(FsmFloat, X Pos) = 0      :: IsNone? = False
               \----PFSM ---- SetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- SetPosition(FsmFloat, ) = 0      :: IsNone? = True
               \----PFSM ---- SetPosition(FsmVector3, ) = (0.0, 0.0, 0.0)      :: IsNone? = True
               \--PFSM Active: False
               \--PFSM ActiveStateName: 
               \--Component: AudioSource
               \--Component: NonBouncer
               \--Component: PlayMakerFixedUpdate
Hornet Boss 1\Corpse Hornet 1(Clone)\Thread
                                      \--Component: Transform
                                      \--GameObject activeSelf: False
                                      \--GameObject layer: 13
                                      \--GameObject tag: Untagged
                                      \--Transform Position: (13.3, 34.0, 0.0)
                                      \--Transform Rotation: (0.0, 0.0, 315.0)
                                      \--Transform LocalScale: (2.3, 1.0, 1.0)
                                      \--Component: MeshFilter
                                      \--Component: MeshRenderer
                                      \--Component: tk2dSprite
                                      \--Component: tk2dSpriteAnimator
Hornet Boss 1\Corpse Hornet 1(Clone)\Grass
                                      \--Component: Transform
                                      \--GameObject activeSelf: True
                                      \--GameObject layer: 11
                                      \--GameObject tag: Untagged
                                      \--Transform Position: (19.7, 27.2, -0.1)
                                      \--Transform Rotation: (0.0, 0.0, 0.0)
                                      \--Transform LocalScale: (1.8, 1.2, 1.0)
                                      \--Component: ParticleSystem
                                      \--Component: ParticleSystemRenderer
                                      \--Component: SetParticleScale
Hornet Boss 1\Corpse Hornet 1(Clone)\Grass Escape
                                      \--Component: Transform
                                      \--GameObject activeSelf: True
                                      \--GameObject layer: 11
                                      \--GameObject tag: Untagged
                                      \--Transform Position: (19.6, 28.6, -0.1)
                                      \--Transform Rotation: (89.4, 90.0, 0.0)
                                      \--Transform LocalScale: (0.0, 1.0, 1.0)
                                      \--Component: ParticleSystem
                                      \--Component: ParticleSystemRenderer
                                      \--Component: SetParticleScale
Hornet Boss 1\Corpse Hornet 1(Clone)\Start Pt
                                      \--Component: Transform
                                      \--GameObject activeSelf: True
                                      \--GameObject layer: 16
                                      \--GameObject tag: Untagged
                                      \--Transform Position: (19.6, 28.6, 0.0)
                                      \--Transform Rotation: (0.0, 0.0, 225.0)
                                      \--Transform LocalScale: (1.0, 1.0, 1.0)
                                      \--Component: ParticleSystem
                                      \--Component: ParticleSystemRenderer
                                      \--Component: ParticleSystemAutoDestroy
Hornet Boss 1\Corpse Hornet 1(Clone)\Leave Anim
                                      \--Component: Transform
                                      \--GameObject activeSelf: False
                                      \--GameObject layer: 11
                                      \--GameObject tag: Untagged
                                      \--Transform Position: (19.6, 28.6, 0.0)
                                      \--Transform Rotation: (0.0, 0.0, 0.0)
                                      \--Transform LocalScale: (1.0, 1.0, 1.0)
                                      \--Component: MeshFilter
                                      \--Component: MeshRenderer
                                      \--Component: tk2dSprite
                                      \--Component: tk2dSpriteAnimator
END +++++++++++++++++++++++++++++++++++++++++++++++++++++++
